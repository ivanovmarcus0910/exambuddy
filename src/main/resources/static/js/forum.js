document.addEventListener("DOMContentLoaded", function () {
    const links = document.querySelectorAll('.list-group-item');
    const urlParams = new URLSearchParams(window.location.search);
    const subject = urlParams.get("subject"); // L·∫•y gi√° tr·ªã subject t·ª´ URL

    let activeSet = false;

    links.forEach(link => {
        if (subject && link.href.includes("subject=" + subject)) {
            link.classList.add("active");
            activeSet = true;
        } else {
            link.classList.remove("active");
        }
    });

    // N·∫øu kh√¥ng c√≥ subject n√†o trong URL, m·∫∑c ƒë·ªãnh ch·ªçn "T·∫•t c·∫£"
    if (!activeSet) {
        document.querySelector('.list-group-item[href="/forum"]').classList.add("active");
    }
});

// document.getElementById('commentImageInput').addEventListener('change', function(event) {
//     let fileList = event.target.files;
//     let output = document.getElementById('commentFiles');
//     output.innerHTML = ''; // X√≥a danh s√°ch c≈©
//
//     if (fileList.length > 0) {
//         output.innerHTML = "<strong>ƒê√£ ch·ªçn:</strong> " +
//             Array.from(fileList).map(file => file.name).join(', ');
//     }
// });

function showAllImages(element) {
    const hiddenImages = element.nextElementSibling;
    const collapseButton = hiddenImages.nextElementSibling;

    if (hiddenImages) {
        hiddenImages.style.display = "flex";
    }
    if (collapseButton) {
        collapseButton.style.display = "block";
    }

    element.style.display = "none";
}

function collapseImages(element) {
    const hiddenImages = element.previousElementSibling;
    const moreImagesButton = hiddenImages.previousElementSibling;

    if (hiddenImages) {
        hiddenImages.style.display = "none";
    }
    if (element) {
        element.style.display = "none";
    }
    if (moreImagesButton) {
        moreImagesButton.style.display = "inline";
    }
}

function toggleLike(btn) {
    const usernameInput = document.querySelector('input[name="username"]');
    const username = usernameInput ? usernameInput.value : null;

    if (!username) {
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√≠ch b√†i vi·∫øt!");
        return;
    }

    const heartIcon = btn.querySelector('.bi');
    const heartCount = btn.querySelector('.heart-count');
    const postId = btn.getAttribute("data-post-id");
    let isLiked = heartIcon.classList.contains('bi-heart-fill');

    // C·∫≠p nh·∫≠t giao di·ªán tr∆∞·ªõc khi g·ª≠i request
    if (isLiked) {
        heartIcon.classList.remove('bi-heart-fill');
        heartIcon.classList.add('bi-heart');
        heartCount.textContent = parseInt(heartCount.textContent) - 1;
        btn.classList.remove('text-danger');
    } else {
        heartIcon.classList.remove('bi-heart');
        heartIcon.classList.add('bi-heart-fill');
        heartCount.textContent = parseInt(heartCount.textContent) + 1;
        btn.classList.add('text-danger');
    }

    // G·ª≠i request c·∫≠p nh·∫≠t tr·∫°ng th√°i like
    fetch("/forum/like", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        body: `postId=${postId}&username=${username}&liked=${!isLiked}`
    })
        .then(response => response.json())
        .then(data => {
            if (data.likeCount !== undefined) {
                heartCount.textContent = data.likeCount;
            }
        })
        .catch(error => {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£t th√≠ch:', error);
        });
}

document.addEventListener('DOMContentLoaded', function () {

    document.querySelectorAll('.toggle-comments').forEach(button => {
        button.addEventListener('click', function () {
            // T√¨m ph·∫ßn t·ª≠ cha l·ªõn nh·∫•t ch·ª©a c·∫£ post-actions v√† comments-section
            const postContainer = this.closest('.post');

            // T√¨m comments-section b√™n trong post ƒë√≥
            const commentsSection = postContainer.querySelector('.comments-section');

            if (commentsSection) {
                commentsSection.style.display = (commentsSection.style.display === 'none' || commentsSection.style.display === '')
                    ? 'block'
                    : 'none';
            }
        });
    });

    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi b√¨nh lu·∫≠n
    document.querySelectorAll('#comment-form').forEach(form => {
        form.addEventListener('submit', function (event) {
            const username = document.querySelector('input[name="username"]').value;
            if (!username) {
                alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ b√¨nh lu·∫≠n!");
                event.preventDefault(); // NgƒÉn form g·ª≠i ƒëi
            }
        });
    });
});

function showMoreComments(button) {
    const commentsSection = button.parentElement;
    const hiddenComments = commentsSection.querySelectorAll('.hidden-comment');
    let commentsToShow = 2;

    for (let i = 0; i < commentsToShow && i < hiddenComments.length; i++) {
        hiddenComments[i].classList.remove('hidden-comment');
    }

    // ·∫®n n√∫t "Hi·ªÉn th·ªã th√™m b√¨nh lu·∫≠n" n·∫øu kh√¥ng c√≤n b√¨nh lu·∫≠n n√†o ƒë·ªÉ hi·ªÉn th·ªã
    if (commentsSection.querySelectorAll('.hidden-comment').length === 0) {
        button.style.display = 'none';
    }
}

function togglePostSettingsMenu(element) {
    const menu = element.nextElementSibling;
    menu.classList.toggle('hidden');
}

function editPost(button) {
    const postUsername = button.getAttribute('data-post-username');
    const currentUsername = '[[@{${username}}]]'; // L·∫•y t√™n ng∆∞·ªùi d√πng hi·ªán t·∫°i

    if (postUsername !== currentUsername) {
        alert("B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªânh s·ª≠a b√†i vi·∫øt c·ªßa m√¨nh");
        return;
    }

    const postId = button.getAttribute('data-post-id');
    window.location.href = `/forum/edit/${postId}`;
}

// Xo√° b√†i vi·∫øt
function deletePost(button) {
    const postUsername = button.getAttribute('data-post-username');
    const currentUsername = '[[@{${username}}]]';

    if (postUsername !== currentUsername) {
        alert("B·∫°n ch·ªâ c√≥ th·ªÉ xo√° b√†i vi·∫øt c·ªßa m√¨nh");
        return;
    }

    const postId = button.getAttribute('data-post-id');
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° b√†i vi·∫øt n√†y kh√¥ng?")) {
        window.location.href = `/forum/delete/${postId}`;
    }
}

// B√°o c√°o b√†i vi·∫øt
function reportPost(button) {
    const postId = button.getAttribute('data-post-id');
    alert(`ƒê√£ b√°o c√°o b√†i vi·∫øt v·ªõi ID: ${postId}`);
}

document.querySelectorAll('.share-button').forEach(button => {
    button.addEventListener('click', function () {
        const postUrl = window.location.href; // L·∫•y URL hi·ªán t·∫°i
        if (navigator.share) {
            // N·∫øu tr√¨nh duy·ªát h·ªó tr·ª£ Web Share API
            navigator.share({
                title: document.title,
                url: postUrl
            }).catch(error => console.error('L·ªói khi chia s·∫ª:', error));
        } else {
            // N·∫øu kh√¥ng h·ªó tr·ª£ Web Share API, hi·ªÉn th·ªã h·ªôp tho·∫°i copy link
            navigator.clipboard.writeText(postUrl).then(() => {
                alert('üîó Link b√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c sao ch√©p!');
            }).catch(error => console.error('L·ªói khi sao ch√©p link:', error));
        }
    });
});

function openImageModal(imgElement) {
    let modalImage = document.getElementById('modalImage');
    modalImage.src = imgElement.src;

    let modal = new bootstrap.Modal(document.getElementById('imageModal'));
    modal.show();
}

function openPostModal(event, postId) {
    event.preventDefault(); // NgƒÉn ch·∫∑n ƒëi·ªÅu h∆∞·ªõng trang
    console.log("ƒê√£ nh·∫•n v√†o b√†i vi·∫øt c√≥ ID:", postId); // Ki·ªÉm tra log trong Console

    let modal = new bootstrap.Modal(document.getElementById('postModal'));
    modal.show();

    let postContent = document.getElementById('postContent');
    postContent.innerHTML = "<p>ƒêang t·∫£i b√†i vi·∫øt...</p>";

    // Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n c√≥ ƒë√∫ng kh√¥ng
    let url = `/postDetail/${encodeURIComponent(postId)}`;
    console.log("ƒêang t·∫£i b√†i vi·∫øt t·ª´:", url);

    fetch(url)
        .then(response => response.text())
        .then(html => {
            postContent.innerHTML = html;
        })
        .catch(error => {
            console.error("L·ªói t·∫£i b√†i vi·∫øt:", error);
            postContent.innerHTML = "<p class='text-danger'>Kh√¥ng th·ªÉ t·∫£i b√†i vi·∫øt.</p>";
        });
}


