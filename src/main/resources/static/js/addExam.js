let questions = []; // M·∫£ng l∆∞u c√¢u h·ªèi t·∫°m th·ªùi
let editingIndex = -1;

function addOptionField() {
    let optionsContainer = document.getElementById("optionsContainer");
    let optionIndex = optionsContainer.children.length;
    let newOptionDiv = document.createElement("div");
    newOptionDiv.classList.add("input-group", "mb-2");

    newOptionDiv.innerHTML = `
        <input type="text" class="form-control" name="option" placeholder="ƒê√°p √°n ${optionIndex + 1}">
        <div class="input-group-append">
            <div class="input-group-text">
                <input type="checkbox" name="correctOption" value="${optionIndex}" class="form-check-input mt-0">
            </div>
            <button type="button" class="btn btn-danger" onclick="removeOption(this)">üóëÔ∏è</button>
        </div>
    `;


    optionsContainer.appendChild(newOptionDiv);
}

function removeOption(button) {
    const inputGroup = button.closest(".input-group");
    if (inputGroup) {
        inputGroup.remove();
    }
}


function addQuestion() {
    let questionText = document.getElementById("questionText").value;
    let options = [];
    let correctAnswers = [];

    const optionDivs = document.querySelectorAll("#optionsContainer .input-group");

    optionDivs.forEach((div) => {
        const optionInput = div.querySelector("input[name='option']");
        const text = optionInput.value.trim();
        if (text !== "") {
            options.push(text);
        }
    });

    // Duy·ªát l·∫°i ƒë·ªÉ l·∫•y correctAnswers theo th·ª© t·ª± th·ª±c t·∫ø
    let visibleIndex = 0;
    optionDivs.forEach((div) => {
        const optionInput = div.querySelector("input[name='option']");
        const checkbox = div.querySelector("input[name='correctOption']");
        const text = optionInput?.value.trim(); // optional chaining ƒë·ªÉ an to√†n

        if (text !== "") {
            if (checkbox && checkbox.checked) {
                correctAnswers.push(visibleIndex);
            }
            visibleIndex++;
        }
    });

    if (questionText.trim() === "" || options.length < 2 || correctAnswers.length === 0) {
        alert("Vui l√≤ng nh·∫≠p c√¢u h·ªèi, √≠t nh·∫•t 2 ƒë√°p √°n v√† ch·ªçn ƒë√°p √°n ƒë√∫ng!");
        return;
    }

    questions.push({ questionText, options, correctAnswers });
    displayQuestions();
    resetForm();
}

function resetForm() {
    document.getElementById("questionText").value = "";
    document.getElementById("optionsContainer").innerHTML = "";
    document.getElementById("addBtn").style.display = "inline";
    document.getElementById("saveEditBtn").style.display = "none";
    editingIndex = -1;
}

function displayQuestions() {
    let questionList = document.getElementById("questionList");
    questionList.innerHTML = "";

    questions.forEach((question, index) => {
        let correctAnswers = question.correctAnswers.map(i => question.options[i]).join(", ");
        let li = document.createElement("li");
        li.className = "list-group-item"; // S·ª≠ d·ª•ng Bootstrap class

        li.innerHTML = `
        <div class="p-2 border rounded shadow-sm">
            <b class="text-primary">${index + 1}. ${question.questionText}</b>
            <br>
            <span class="text-secondary">(${question.options.join(", ")})</span>
            <br>
            <span class="text-success font-weight-bold">‚úÖ ƒê√°p √°n ƒë√∫ng: ${correctAnswers}</span>
            <div class="mt-2">
                <button class="btn btn-warning btn-sm" onclick="editQuestion(${index})">‚úèÔ∏è S·ª≠a</button>
                <button class="btn btn-danger btn-sm" onclick="deleteQuestion(${index})">‚ùå X√≥a</button>
            </div>
        </div>
    `;

        questionList.appendChild(li);
    });
}

function editQuestion(index) {
    let question = questions[index];
    editingIndex = index;

    document.getElementById("questionText").value = question.questionText;
    let optionsContainer = document.getElementById("optionsContainer");
    optionsContainer.innerHTML = "";

    question.options.forEach((option, i) => {
        let newOptionDiv = document.createElement("div");
        newOptionDiv.classList.add("input-group", "mb-2");
        newOptionDiv.innerHTML = `
            <input type="text" class="form-control" name="option" value="${option}">
            <div class="input-group-append">
                <div class="input-group-text">
                    <input type="checkbox" name="correctOption" value="${i}" class="form-check-input mt-0" ${question.correctAnswers.includes(i) ? "checked" : ""}>
                </div>
                <button type="button" class="btn btn-danger" onclick="removeOption(this)">üóëÔ∏è</button>
            </div>
        `;
        optionsContainer.appendChild(newOptionDiv);
    });

    document.getElementById("addBtn").style.display = "none";
    document.getElementById("saveEditBtn").style.display = "inline";
}

function saveEdit() {
    if (editingIndex === -1) return;

    let questionText = document.getElementById("questionText").value;
    let options = [];
    let correctAnswers = [];

    const optionDivs = document.querySelectorAll("#optionsContainer .input-group");

    optionDivs.forEach((div) => {
        const input = div.querySelector("input[name='option']");
        const checkbox = div.querySelector("input[name='correctOption']");
        const text = input?.value.trim();

        if (text !== "") {
            options.push(text);
        }
    });

    let visibleIndex = 0;
    optionDivs.forEach((div) => {
        const input = div.querySelector("input[name='option']");
        const checkbox = div.querySelector("input[name='correctOption']");
        const text = input?.value.trim();

        if (text !== "" && checkbox?.checked) {
            correctAnswers.push(visibleIndex);
        }

        if (text !== "") visibleIndex++;
    });

    if (questionText.trim() === "" || options.length < 2 || correctAnswers.length === 0) {
        alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin c√¢u h·ªèi v√† ƒë√°p √°n.");
        return;
    }

    questions[editingIndex] = { questionText, options, correctAnswers };
    displayQuestions();
    resetForm();
}

function deleteQuestion(index) {
    questions.splice(index, 1);
    displayQuestions();
}

function getCookie(name) {
    let cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
        let cookie = cookies[i].trim();
        if (cookie.startsWith(name + '=')) {
            return cookie.substring(name.length + 1);
        }
    }
    return null;
}
function validateForm() {
    let fields = ["examName", "grade", "subject", "timeduration", "examType", "city"];
    let isValid = true;

    fields.forEach(id => {
        let field = document.getElementById(id);
        if (field.value.trim() === "") {
            field.classList.add("border-danger");
            isValid = false;
        } else {
            field.classList.remove("border-danger");
        }
    });

    if (!isValid) {
        alert("Please complete all required fields before submitting.");
        return false;
    }

    return true;
}
function submitQuestions() {

    if (!validateForm()) {
        return;
    }
    document.getElementById("messageContainer").innerHTML =
        '<div class="alert alert-warning" style="font-size:0.9rem;">Uploading</div>';

    let username = getCookie("noname"); // L·∫•y username t·ª´ cookie
    if (!username) {
        alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
        return;
    }

    if (questions.length === 0) {
        alert("Ch∆∞a c√≥ c√¢u h·ªèi n√†o ƒë·ªÉ g·ª≠i!");
        return;
    }

    let examData = {
        examName: document.getElementById("examName").value,
        grade: document.getElementById("grade").value, // ƒê√∫ng id "grade"
        subject: document.getElementById("subject").value,
        tags: document.getElementById("tags").value.split(","),
        examType: document.getElementById("examType").value, // ƒê√∫ng id "examType"
        city: document.getElementById("city").value, // ƒê√∫ng id "city"
        username: username,
        date: new Date().toISOString(),
        questions: questions,
        timeduration: document.getElementById("timeduration").value
    };


    fetch("/exams/addExam", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify(examData)
    })
        .then(response => response.text())
        .then(data => {
            document.getElementById("messageContainer").innerHTML =
                '<div class="alert alert-success" style="font-size:0.9rem;">ƒê√£ l∆∞u ƒë·ªÅ thi th√†nh c√¥ng!</div>';
            questions = [];
            displayQuestions();
        })
        .catch(error => {
            console.error("L·ªói:", error);
            document.getElementById("messageContainer").innerHTML =
                '<div class="alert alert-danger" style="font-size:0.9rem;">C√≥ l·ªói x·∫£y ra khi l∆∞u ƒë·ªÅ thi!</div>';
        });
}


document.getElementById("grade").addEventListener("change", function () {
    let grade = this.value;
    let examTypeSelect = document.getElementById("examType");


    // X√≥a t·∫•t c·∫£ c√°c t√πy ch·ªçn hi·ªán c√≥
    examTypeSelect.innerHTML = '<option value="">Ch·ªçn d·∫°ng ƒë·ªÅ</option>';


    if (grade === "10" || grade === "11") {
        // N·∫øu ch·ªçn l·ªõp 10 ho·∫∑c 11, ch·ªâ hi·ªÉn th·ªã 2 t√πy ch·ªçn
        examTypeSelect.innerHTML +=
            '<option value="ƒê·ªÅ ki·ªÉm tra">ƒê·ªÅ ki·ªÉm tra</option>' +
            '<option value="ƒê·ªÅ luy·ªán t·∫≠p">ƒê·ªÅ luy·ªán t·∫≠p</option>';
    } else if (grade === "12") {
        // N·∫øu ch·ªçn l·ªõp 12, hi·ªÉn th·ªã c·∫£ 3 t√πy ch·ªçn
        examTypeSelect.innerHTML +=
            '<option value="ƒê·ªÅ ki·ªÉm tra">ƒê·ªÅ ki·ªÉm tra</option>' +
            '<option value="ƒê·ªÅ luy·ªán t·∫≠p">ƒê·ªÅ luy·ªán t·∫≠p</option>' +
            '<option value="ƒê·ªÅ THPT">ƒê·ªÅ THPT QU·ªêC GIA</option>';
    }
});

const cities = ["H√† N·ªôi", "H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "H·∫£i Ph√≤ng", "C·∫ßn Th∆°", "An Giang", "B√† R·ªãa - V≈©ng T√†u",
    "B·∫Øc Giang", "B·∫Øc K·∫°n", "B·∫°c Li√™u", "B·∫Øc Ninh", "B·∫øn Tre", "B√¨nh ƒê·ªãnh", "B√¨nh D∆∞∆°ng", "B√¨nh Ph∆∞·ªõc", "B√¨nh Thu·∫≠n", "C√† Mau",
    "Cao B·∫±ng", "ƒê·∫Øk L·∫Øk", "ƒê·∫Øk N√¥ng", "ƒêi·ªán Bi√™n", "ƒê·ªìng Nai", "ƒê·ªìng Th√°p", "Gia Lai", "H√† Giang", "H√† Nam", "H√† Tƒ©nh", "H·∫£i D∆∞∆°ng",
    "H·∫≠u Giang", "H√≤a B√¨nh", "H∆∞ng Y√™n", "Kh√°nh H√≤a", "Ki√™n Giang", "Kon Tum", "Lai Ch√¢u", "L√¢m ƒê·ªìng", "L·∫°ng S∆°n", "L√†o Cai", "Long An",
    "Nam ƒê·ªãnh", "Ngh·ªá An", "Ninh B√¨nh", "Ninh Thu·∫≠n", "Ph√∫ Th·ªç", "Ph√∫ Y√™n", "Qu·∫£ng B√¨nh", "Qu·∫£ng Nam", "Qu·∫£ng Ng√£i", "Qu·∫£ng Ninh", "Qu·∫£ng Tr·ªã",
    "S√≥c TrƒÉng", "S∆°n La", "T√¢y Ninh", "Th√°i B√¨nh", "Th√°i Nguy√™n", "Thanh H√≥a", "Th·ª´a Thi√™n Hu·∫ø", "Ti·ªÅn Giang", "Tr√† Vinh", "Tuy√™n Quang", "Vƒ©nh Long",
    "Vƒ©nh Ph√∫c", "Y√™n B√°i"];
const citySelect = document.getElementById('city');
cities.forEach(city => {
    const option = document.createElement('option');
    option.value = city; // Gi·ªØ nguy√™n gi√° tr·ªã g·ªëc
    option.textContent = city;
    citySelect.appendChild(option);
});

function importFromExcel() {
    const fileInput = document.getElementById('excelFile');
    const file = fileInput.files[0];
    if (!file) {
        alert('Vui l√≤ng ch·ªçn file Excel!');
        return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });

        console.log('Rows from Excel:', rows); // Debug log

        let importedCount = 0;

        rows.forEach(row => {
            if (row.length < 3) return; // c·∫ßn √≠t nh·∫•t: c√¢u h·ªèi + 1 ƒë√°p √°n + ƒë√°p √°n ƒë√∫ng

            const questionText = String(row[0]).trim();
            const correctAnswerStr = String(row[row.length - 1]).toUpperCase().trim();
            const rawOptions = row.slice(1, row.length - 1); // c√°c ƒë√°p √°n (B1 ‚Üí Bn)

            const options = rawOptions.map(opt => opt ? String(opt).trim() : "");
            const correctAnswers = [];

            correctAnswerStr.split(',').forEach(ans => {
                const index = ans.trim().charCodeAt(0) - 65; // 'A' = 0, 'B' = 1, ...
                if (index >= 0 && index < options.length) {
                    correctAnswers.push(index);
                } else {
                    console.warn(`ƒê√°p √°n kh√¥ng h·ª£p l·ªá: ${ans}`);
                }
            });

            if (questionText && options.every(opt => opt) && correctAnswers.length > 0) {
                questions.push({ questionText, options, correctAnswers });
                importedCount++;
            } else {
                console.warn('B·ªè qua d√≤ng kh√¥ng h·ª£p l·ªá:', { questionText, options, correctAnswers });
            }
        });

        displayQuestions();
        fileInput.value = ''; // Reset input
        alert(`‚úÖ ƒê√£ import ${importedCount} c√¢u h·ªèi t·ª´ file Excel.`);
    };
    reader.readAsArrayBuffer(file);
}


function importFromDocx() {
    const fileInput = document.getElementById('docxFile');
    const file = fileInput.files[0];
    if (!file) {
        alert('Vui l√≤ng ch·ªçn file DOCX!');
        return;
    }

    const formData = new FormData();
    formData.append('file', file);

    fetch('/exams/importDocx', {
        method: 'POST',
        body: formData
    })
        .then(response => response.json())
        .then(data => {
            if (data.questions) {
                questions = data.questions;
                displayQuestions();
                alert(data.message);
            } else {
                alert(data.message || "Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë∆∞·ª£c tr·∫£ v·ªÅ.");
            }
        })
        .catch(error => {
            console.error('L·ªói:', error);
            alert('L·ªói khi import file DOCX!');
        });
}
