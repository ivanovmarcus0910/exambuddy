let questions = []; // M·∫£ng l∆∞u c√¢u h·ªèi t·∫°m th·ªùi
let editingIndex = -1;
document.addEventListener("DOMContentLoaded", function () {
    loadExamData(examData); // G·ªçi h√†m khi trang ƒë∆∞·ª£c load
});

function loadExamData(exam) {
    if (!exam || !exam.questions) {
        console.error("D·ªØ li·ªáu ƒë·ªÅ thi kh√¥ng h·ª£p l·ªá:", exam);
        return;
    }

    // G√°n d·ªØ li·ªáu v√†o c√°c tr∆∞·ªùng input
    document.getElementById("examName").value = exam.examName || "";
    document.getElementById("grade").value = exam.grade || "";
    document.getElementById("subject").value = exam.subject || "";
    document.getElementById("tags").value = exam.tags ? exam.tags.join(", ") : "";
    document.getElementById("examType").value = exam.examType || "";
    document.getElementById("city").value = exam.city || "";

    // G√°n l·∫°i danh s√°ch c√¢u h·ªèi
    questions = exam.questions.map(q => ({
        questionText: q.questionText,
        options: q.options,
        correctAnswers: q.correctAnswers
    }));
    // Hi·ªÉn th·ªã danh s√°ch c√¢u h·ªèi l√™n giao di·ªán
    displayQuestions();
}



function addOptionField() {
    let optionsContainer = document.getElementById("optionsContainer");
    let optionIndex = optionsContainer.children.length;
    let newOptionDiv = document.createElement("div");
    newOptionDiv.classList.add("input-group", "mb-2");

    newOptionDiv.innerHTML = `
        <input type="text" class="form-control" name="option" placeholder="ƒê√°p √°n ${optionIndex + 1}">
        <div class="input-group-append">
            <div class="input-group-text">
                <input type="checkbox" name="correctOption" value="${optionIndex}" class="form-check-input mt-0">
            </div>
            <button type="button" class="btn btn-danger" onclick="removeOption(this)">üóëÔ∏è</button>
        </div>
    `;


    optionsContainer.appendChild(newOptionDiv);
}

function removeOption(button) {
    button.parentNode.remove();
}

function addQuestion() {
    let questionText = document.getElementById("questionText").value;
    let options = [];
    let correctAnswers = [];

    document.querySelectorAll("#optionsContainer > .input-group").forEach((div, index) => {
        let optionText = div.querySelector("input[name='option']").value;
        let isChecked = div.querySelector("input[name='correctOption']").checked;

        if (optionText.trim() !== "") {
            options.push(optionText);
            if (isChecked) {
                correctAnswers.push(index);
            }
        }
    });

    if (questionText.trim() === "" || options.length < 2 || correctAnswers.length === 0) {
        alert("Vui l√≤ng nh·∫≠p c√¢u h·ªèi, √≠t nh·∫•t 2 ƒë√°p √°n v√† ch·ªçn ƒë√°p √°n ƒë√∫ng!");
        return;
    }

    let question = {questionText, options, correctAnswers};
    questions.push(question);
    displayQuestions();
    resetForm();
}

function resetForm() {
    document.getElementById("questionText").value = "";
    document.getElementById("optionsContainer").innerHTML = "";
    document.getElementById("addBtn").style.display = "inline";
    document.getElementById("saveEditBtn").style.display = "none";
    editingIndex = -1;
}

function displayQuestions() {
    let questionList = document.getElementById("questionList");
    questionList.innerHTML = "";

    questions.forEach((question, index) => {
        let correctAnswers = question.correctAnswers.map(i => question.options[i]).join(", ");
        let li = document.createElement("li");
        li.className = "list-group-item"; // S·ª≠ d·ª•ng Bootstrap class

        li.innerHTML = `
        <div class="p-2 border rounded shadow-sm">
            <b class="text-primary">${index + 1}. ${question.questionText}</b>
            <br>
            <span class="text-secondary">(${question.options.join(", ")})</span>
            <br>
            <span class="text-success font-weight-bold">‚úÖ ƒê√°p √°n ƒë√∫ng: ${correctAnswers}</span>
            <div class="mt-2">
                <button class="btn btn-warning btn-sm" onclick="editQuestion(${index})">‚úèÔ∏è S·ª≠a</button>
                <button class="btn btn-danger btn-sm" onclick="deleteQuestion(${index})">‚ùå X√≥a</button>
            </div>
        </div>
    `;

        questionList.appendChild(li);
    });
}

function editQuestion(index) {
    let question = questions[index];
    editingIndex = index;

    document.getElementById("questionText").value = question.questionText;
    let optionsContainer = document.getElementById("optionsContainer");
    optionsContainer.innerHTML = "";
    question.options.forEach((option, i) => {
        let newOptionDiv = document.createElement("div");
        newOptionDiv.innerHTML = `
          <input type="text" name="option" value="${option}">
          <input type="checkbox" name="correctOption" value="${i}" ${question.correctAnswers.includes(i) ? "checked" : ""}>
          <button type="button" onclick="removeOption(this)">üóëÔ∏è</button>
        `;
        optionsContainer.appendChild(newOptionDiv);
    });

    document.getElementById("addBtn").style.display = "none";
    document.getElementById("saveEditBtn").style.display = "inline";
}

function saveEdit() {
    if (editingIndex === -1) return;

    let correctAnswers = [];
    let options = [];

    document.querySelectorAll("#optionsContainer div").forEach((div, i) => {
        let optionText = div.querySelector("input[name='option']").value;
        let isChecked = div.querySelector("input[name='correctOption']").checked;

        if (optionText.trim() !== "") {
            options.push(optionText);
            if (isChecked) {
                correctAnswers.push(i);
            }
        }
    });

    questions[editingIndex] = {
        questionText: document.getElementById("questionText").value,
        options,
        correctAnswers
    };
    document.getElementById("saveEditBtn").style.display = "none";

    displayQuestions();
    resetForm();
}

function deleteQuestion(index) {
    questions.splice(index, 1);
    console.log(questions);
    displayQuestions();
}

function getCookie(name) {
    let cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
        let cookie = cookies[i].trim();
        if (cookie.startsWith(name + '=')) {
            return cookie.substring(name.length + 1);
        }
    }
    return null;
}

function submitQuestions() {

    if (!name) {
        alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
        return;
    }

    if (questions.length === 0) {
        alert("Ch∆∞a c√≥ c√¢u h·ªèi n√†o ƒë·ªÉ g·ª≠i!");
        return;
    }

    let examData = {
        examName: document.getElementById("examName").value,
        grade: document.getElementById("grade").value, // ƒê√∫ng id "grade"
        subject: document.getElementById("subject").value,
        tags: document.getElementById("tags").value.split(","),
        examType: document.getElementById("examType").value, // ƒê√∫ng id "examType"
        city: document.getElementById("city").value, // ƒê√∫ng id "city"
        username: name,
        date: new Date().toISOString(),
        questions: questions
    };


    fetch(`/exams/edit/${examId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(examData),
        credentials: 'include' // ƒê·ªÉ g·ª≠i session cookie (quan tr·ªçng n·∫øu d√πng HttpSession)
    })
        .then(response => {
            if (!response.ok) {
                return response.text().then(err => { throw new Error(err); });
            }
            return response.text();
        })
        .then(message => {
            alert(message); // Hi·ªÉn th·ªã th√¥ng b√°o t·ª´ server
            questions = [];
            displayQuestions();
        })
        .catch(error => {
            console.error("L·ªói:", error);
            alert(error.message);
        });
}


document.getElementById("grade").addEventListener("change", function () {
    let grade = this.value;
    let examTypeSelect = document.getElementById("examType");


    // X√≥a t·∫•t c·∫£ c√°c t√πy ch·ªçn hi·ªán c√≥
    examTypeSelect.innerHTML = '<option value="">Ch·ªçn d·∫°ng ƒë·ªÅ</option>';


    if (grade === "10" || grade === "11") {
        // N·∫øu ch·ªçn l·ªõp 10 ho·∫∑c 11, ch·ªâ hi·ªÉn th·ªã 2 t√πy ch·ªçn
        examTypeSelect.innerHTML +=
            '<option value="ƒê·ªÅ ki·ªÉm tra">ƒê·ªÅ ki·ªÉm tra</option>' +
            '<option value="ƒê·ªÅ luy·ªán t·∫≠p">ƒê·ªÅ luy·ªán t·∫≠p</option>';
    } else if (grade === "12") {
        // N·∫øu ch·ªçn l·ªõp 12, hi·ªÉn th·ªã c·∫£ 3 t√πy ch·ªçn
        examTypeSelect.innerHTML +=
            '<option value="ƒê·ªÅ ki·ªÉm tra">ƒê·ªÅ ki·ªÉm tra</option>' +
            '<option value="ƒê·ªÅ luy·ªán t·∫≠p">ƒê·ªÅ luy·ªán t·∫≠p</option>' +
            '<option value="ƒê·ªÅ THPT">ƒê·ªÅ THPT QU·ªêC GIA</option>';
    }
});

const cities = ["H√† N·ªôi", "H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "H·∫£i Ph√≤ng", "C·∫ßn Th∆°", "An Giang", "B√† R·ªãa - V≈©ng T√†u",
    "B·∫Øc Giang", "B·∫Øc K·∫°n", "B·∫°c Li√™u", "B·∫Øc Ninh", "B·∫øn Tre", "B√¨nh ƒê·ªãnh", "B√¨nh D∆∞∆°ng", "B√¨nh Ph∆∞·ªõc", "B√¨nh Thu·∫≠n", "C√† Mau",
    "Cao B·∫±ng", "ƒê·∫Øk L·∫Øk", "ƒê·∫Øk N√¥ng", "ƒêi·ªán Bi√™n", "ƒê·ªìng Nai", "ƒê·ªìng Th√°p", "Gia Lai", "H√† Giang", "H√† Nam", "H√† Tƒ©nh", "H·∫£i D∆∞∆°ng",
    "H·∫≠u Giang", "H√≤a B√¨nh", "H∆∞ng Y√™n", "Kh√°nh H√≤a", "Ki√™n Giang", "Kon Tum", "Lai Ch√¢u", "L√¢m ƒê·ªìng", "L·∫°ng S∆°n", "L√†o Cai", "Long An",
    "Nam ƒê·ªãnh", "Ngh·ªá An", "Ninh B√¨nh", "Ninh Thu·∫≠n", "Ph√∫ Th·ªç", "Ph√∫ Y√™n", "Qu·∫£ng B√¨nh", "Qu·∫£ng Nam", "Qu·∫£ng Ng√£i", "Qu·∫£ng Ninh", "Qu·∫£ng Tr·ªã",
    "S√≥c TrƒÉng", "S∆°n La", "T√¢y Ninh", "Th√°i B√¨nh", "Th√°i Nguy√™n", "Thanh H√≥a", "Th·ª´a Thi√™n Hu·∫ø", "Ti·ªÅn Giang", "Tr√† Vinh", "Tuy√™n Quang", "Vƒ©nh Long",
    "Vƒ©nh Ph√∫c", "Y√™n B√°i"];
const citySelect = document.getElementById('city');
cities.forEach(city => {
    const option = document.createElement('option');
    option.value = city; // Gi·ªØ nguy√™n gi√° tr·ªã g·ªëc
    option.textContent = city;
    citySelect.appendChild(option);
});



