package com.example.exambuddy.controller;

import com.example.exambuddy.service.FirebaseAuthService;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

@Controller
public class AuthController {

    @Autowired
    private FirebaseAuthService authService;

    //Tra ve trang login
    @GetMapping("/login")
    public String loginPage() {
        return "login";
    }

    // ƒêi·ªÅu h∆∞·ªõng trang Home
    @GetMapping("")
    public String homePage() {
        return "home";
    }

    // ‚úÖ X·ª≠ l√Ω ƒëƒÉng nh·∫≠p trong Spring Boot v·ªõi session & cookie
    @PostMapping("/login")
    public String login(@RequestParam String username,
                        @RequestParam String password,
                        @RequestParam(required = false) boolean rememberMe,
                        Model model,
                        HttpSession session,
                        HttpServletResponse response,
                        HttpServletRequest request) throws UnsupportedEncodingException {

        // Ki·ªÉm tra x√°c th·ª±c email
        if (!authService.isEmailVerified(username)) {
            model.addAttribute("error", "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email.");
            return "login";
        }

        // X√°c th·ª±c t√†i kho·∫£n
        if (authService.authenticate(username, password)) {
            // L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p v√†o session
            session.setAttribute("loggedInUser", username);


            if (rememberMe) {
                Cookie usernameCookie = new Cookie("rememberedUsername", URLEncoder.encode(username, "UTF-8"));
                Cookie passwordCookie = new Cookie("rememberedPassword", URLEncoder.encode(password, "UTF-8"));
                Cookie noname = new Cookie("noname", URLEncoder.encode(username, "UTF-8"));

                usernameCookie.setMaxAge(24 * 60 * 60); // L∆∞u trong 7 ng√†y
                passwordCookie.setMaxAge(24 * 60 * 60);
                noname.setMaxAge(24 * 60 * 60/7);
                usernameCookie.setHttpOnly(false); // Cho ph√©p truy c·∫≠p t·ª´ JavaScript
                passwordCookie.setHttpOnly(false);
                noname.setHttpOnly(false);
                usernameCookie.setSecure(false); // Cho ph√©p tr√™n HTTP
                passwordCookie.setSecure(false);
                noname.setSecure(false);
                usernameCookie.setPath("/");
                passwordCookie.setPath("/");
                noname.setPath("/");
                response.addCookie(usernameCookie);
                response.addCookie(passwordCookie);
                response.addCookie(noname);
            } else {
                // Xo√° cookie n·∫øu kh√¥ng ch·ªçn "Ghi nh·ªõ ƒëƒÉng nh·∫≠p"
                Cookie[] cookies = request.getCookies();
                Cookie noname = new Cookie("noname", URLEncoder.encode(username, "UTF-8"));
                noname.setMaxAge(24 * 60 * 60/7);
                noname.setHttpOnly(false);
                noname.setSecure(false);
                response.addCookie(noname);

                if (cookies != null) {
                    for (Cookie cookie : cookies) {
                        if ("rememberedUsername".equals(cookie.getName()) || "rememberedPassword".equals(cookie.getName())) {
                            cookie.setMaxAge(0);
                            cookie.setPath("/");
                            response.addCookie(cookie);
                        }
                    }
                }
            }
            return "redirect:/home";
        }
        model.addAttribute("error", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
        return "login";
    }




    @RequestMapping("/logout")
    public String logout(HttpSession session, HttpServletResponse response, HttpServletRequest request) {
        session.removeAttribute("loggedInUser");
        session.invalidate();
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if ("rememberedUsername".equals(cookie.getName()) || "rememberedPassword".equals(cookie.getName()) || "noname".equals(cookie.getName())) {
                    cookie.setMaxAge(0);
                    cookie.setPath("/");
                    response.addCookie(cookie);
                }
            }
        }
        System.out.println("ƒê√£ logout");
        return "home"; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang home, ƒë·∫£m b·∫£o session ƒë√£ b·ªã x√≥a
    }

    @GetMapping("/forgotPass")
    public String forgotPasswordPage() {
        return "forgotPass";
    }

    @PostMapping("/forgotPass")
    public String sendOtp(@RequestParam String email, Model model) {
        System.out.println("üì© ƒê√£ nh·∫≠n y√™u c·∫ßu g·ª≠i OTP cho email: " + email);
        String result = authService.sendPasswordResetOtp(email);
        model.addAttribute("message", result);
        model.addAttribute("email", email);
        return "verifyOTP";
    }

    @PostMapping("/resendOTP")
    public String resendOtp(@RequestParam String email, @RequestParam String actionType, Model model) {
        System.out.println("üì© ƒêang g·ª≠i l·∫°i OTP cho email: " + email);
        String result = authService.resendOtp(email, actionType);
        model.addAttribute("message", result);
        model.addAttribute("email", email);
        model.addAttribute("actionType", actionType);

        return "verifyOTP";
    }


    @PostMapping("/verifyOTP")
    public String verifyOtp(@RequestParam String email, @RequestParam String otp,
                            @RequestParam String actionType, Model model) {
        boolean success;

        if ("register".equals(actionType)) {
            success = authService.verifyAccountOtp(email, otp);
        } else {
            success = authService.verifyOtp(email, otp);
        }

        if (success) {
            if ("register".equals(actionType)) {
                model.addAttribute("message", "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c! H√£y ƒëƒÉng nh·∫≠p.");
                return "login";
            } else {
                model.addAttribute("email", email);
                return "resetPass";
            }
        } else {
            model.addAttribute("error", "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
            model.addAttribute("email", email);
            model.addAttribute("actionType", actionType);
            return "verifyOTP";
        }
    }

    @GetMapping("/resetPass")
    public String resetPassPage(@RequestParam(required = false) String email,
                                HttpSession session, Model model) {
        if (email != null) {
            // Tr∆∞·ªùng h·ª£p ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (qu√™n m·∫≠t kh·∫©u)
            model.addAttribute("email", email);
        } else {
            // Tr∆∞·ªùng h·ª£p ƒë·ªïi m·∫≠t kh·∫©u t·ª´ trang c√° nh√¢n
            String username = (String) session.getAttribute("loggedInUser");
            if (username == null) {
                return "redirect:/login"; // Ch∆∞a ƒëƒÉng nh·∫≠p th√¨ chuy·ªÉn v·ªÅ login
            }
            model.addAttribute("email", username); // D√πng username l√†m email
        }
        return "resetPass";
    }


    // X·ª≠ l√Ω ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
    @PostMapping("/resetPass")
    public String resetPassword(@RequestParam String email,
                                @RequestParam String newPassword,
                                @RequestParam String confirmPassword,
                                Model model) {
        // Ki·ªÉm tra x√°c nh·∫≠n m·∫≠t kh·∫©u
        if (!newPassword.equals(confirmPassword)) {
            model.addAttribute("error", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            return "resetPass";
        }

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
        boolean isUpdated = authService.updatePassword(email, newPassword);
        if (isUpdated) {
            model.addAttribute("success", "M·∫≠t kh·∫©u ƒë√£ c·∫≠p nh·∫≠t th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p l·∫°i.");
            return "login";  // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
        } else {
            model.addAttribute("error", "L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i!");
            return "resetPass";
        }
    }

    @GetMapping("/changePass")
    public String changePasswordPage(HttpSession session, Model model) {
        String username = (String) session.getAttribute("loggedInUser");
        if (username == null) {
            return "redirect:/login"; // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng v·ªÅ login
        }
        return "changePass"; // Tr·∫£ v·ªÅ trang HTML ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u
    }

    @PostMapping("/changePass")
    public String changePassword(@RequestParam String currentPassword,
                                 @RequestParam String newPassword,
                                 @RequestParam String confirmPassword,
                                 HttpSession session,
                                 Model model) {

        // üî• L·∫•y username c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p t·ª´ session
        String username = (String) session.getAttribute("loggedInUser");
        if (username == null) {
            return "redirect:/login"; // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng v·ªÅ login
        }

        // üîç Ki·ªÉm tra x√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
        if (!newPassword.equals(confirmPassword)) {
            model.addAttribute("error", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            return "changePass";
        }

        System.out.println("üìå ƒêang th·ª±c hi·ªán ƒë·ªïi m·∫≠t kh·∫©u cho username: " + username);

        // ‚úÖ G·ªçi `updatePasswordForLoggedInUser` ƒë·ªÉ ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i & c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        boolean isUpdated = authService.updatePasswordForUser(username, currentPassword, newPassword);
        if (isUpdated) {
            model.addAttribute("success", "M·∫≠t kh·∫©u ƒë√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!");
        } else {
            model.addAttribute("error", "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng ho·∫∑c c√≥ l·ªói khi c·∫≠p nh·∫≠t!");
        }

        return "changePass";
    }

    // Tra ve trang signup
    @GetMapping("/signup")
    public String signupPage() {
        return "signup";
    }

    // Xu li signup
    @PostMapping("/signup")
    public String signup(@RequestParam String email,
                         @RequestParam String phone,
                         @RequestParam String username,
                         @RequestParam String password,
                         @RequestParam String confirmPassword,
                         Model model) {

        boolean hasError = false;
        // Ki·ªÉm tra n·∫øu b·∫•t k·ª≥ tr∆∞·ªùng n√†o b·ªã thi·∫øu
        if (email == null || phone == null || username == null || password == null || confirmPassword == null) {
            model.addAttribute("error", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            hasError = true;
        }

        // Ki·ªÉm tra email h·ª£p l·ªá
        if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            model.addAttribute("emailError", "Email kh√¥ng h·ª£p l·ªá!");
            hasError = true;
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá (t·ªëi thi·ªÉu 9 s·ªë)
        if (!phone.matches("^\\d{9,}$")) {
            model.addAttribute("phoneError", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!");
            hasError = true;
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u x√°c nh·∫≠n
        if (!password.equals(confirmPassword)) {
            model.addAttribute("passwordError", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            hasError = true;
        }

        // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (authService.isEmailExists(email)) {
            model.addAttribute("emailError", "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
            hasError = true;
        }

        // Ki·ªÉm tra xem username ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (authService.isUsernameExists(username)) {
            model.addAttribute("usernameError", "T√™n ƒëƒÉng nh·∫≠p n√†y ƒë√£ t·ªìn t·∫°i!");
            hasError = true;
        }

        // N·∫øu c√≥ l·ªói, quay l·∫°i trang signup + gi·ªØ l·∫°i th√¥ng tin nh·∫≠p v√†o
        if (hasError) {
            model.addAttribute("emailValue", email);
            model.addAttribute("phoneValue", phone);
            model.addAttribute("usernameValue", username);
            return "signup";
        }

        /**
         * ƒêƒÉng k√Ω v√† g·ª≠i email x√°c th·ª±c
         */
        /*
        System.out.println("üëâ ƒêƒÉng k√Ω ng∆∞·ªùi d√πng: " + email);
        String result = authService.registerUser(email, phone, username, password);
        if (result.startsWith("Error")) {
            model.addAttribute("error", result);
            return "signup";
        }
        System.out.println("üëâ G·ª≠i email x√°c th·ª±c v·ªõi token: " + result);

        // Chuy·ªÉn ƒë·∫øn trang register.html
        model.addAttribute("email", email);
        return "register.html";

         */
        String result = authService.registerUser(email, phone, username, password);
        model.addAttribute("email", email);
        model.addAttribute("actionType", "register");  // X√°c th·ª±c t√†i kho·∫£n
        model.addAttribute("message", result);
        return "verifyOTP"; // D√πng chung trang verifyOTP.html
    }


}
