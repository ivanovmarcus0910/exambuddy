package com.example.exambuddy.controller;

import com.example.exambuddy.model.User;
import com.example.exambuddy.service.CookieService;
import com.example.exambuddy.service.FirebaseAuthService;
import com.example.exambuddy.service.PasswordService;
import com.example.exambuddy.service.UserService;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;


import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Map;

@Controller
public class AuthController {

    @Autowired
    private FirebaseAuthService authService;
    @Autowired
    private PasswordService passService;
    @Autowired
    private UserService userService;

    @Autowired
    private CookieService cookieService;

    //Tra ve trang login
    @GetMapping("/login")
    public String showLoginPage(HttpSession session) {
        if (session.getAttribute("loggedInUser") != null) {
            return "redirect:/home"; // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng v·ªÅ home
        }
        return "login"; // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã trang login
    }

    // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p OAuth2
    @GetMapping("/oauth2/success")
    public String oauth2LoginSuccess(@AuthenticationPrincipal OidcUser oidcUser, @AuthenticationPrincipal OAuth2User oauth2User, HttpSession session, HttpServletResponse response) throws UnsupportedEncodingException {
        String email = null;
        String name = null;
        String picture = null;

        if (oidcUser != null) { // Google
            email = oidcUser.getAttribute("email");
            name = oidcUser.getAttribute("name");
            picture = oidcUser.getAttribute("picture");
        } else if (oauth2User != null) { // Facebook
            email = oauth2User.getAttribute("email");
            name = oauth2User.getAttribute("name");
            Map<String, Object> pictureObj = oauth2User.getAttribute("picture");
            if (pictureObj != null) {
                Map<String, Object> data = (Map<String, Object>) pictureObj.get("data");
                if (data != null) {
                    picture = (String) data.get("url");
                }
            }
            System.out.println("Avatar URL: " + picture);
        }

        if (email != null) {
            UserService.saveOAuth2User(email, name, picture);

            session.setAttribute("loggedInUser", email);

            Cookie nonameCookie = new Cookie("noname", URLEncoder.encode(email, "UTF-8"));
            nonameCookie.setMaxAge(24 * 60 * 60);
            nonameCookie.setPath("/");
            response.addCookie(nonameCookie);
            session.setAttribute("urlimg", UserService.getAvatarUrlByUsername(email));

            System.out.println("ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi email: " + email);
            return "redirect:/home";
        }

        return "redirect:/login";
    }

    @GetMapping("/oauth2/failure")
    public String oauth2LoginFailure(Model model) {
        model.addAttribute("error", "ƒêƒÉng nh·∫≠p b·∫±ng Google/Facebook th·∫•t b·∫°i!");
        return "login";
    }

    // ƒêi·ªÅu h∆∞·ªõng trang Home

    // ‚úÖ X·ª≠ l√Ω ƒëƒÉng nh·∫≠p trong Spring Boot v·ªõi session & cookie
    @PostMapping("/login")
    public String login(@RequestParam String username,
                        @RequestParam String password,
                        @RequestParam(required = false) boolean rememberMe,
                        Model model,
                        HttpSession session,
                        HttpServletResponse response,
                        HttpServletRequest request) throws UnsupportedEncodingException {

        // Ki·ªÉm tra x√°c th·ª±c email
        if (!authService.isEmailVerified(username)) {
            model.addAttribute("error", "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email.");
            return "login";
        }

        // X√°c th·ª±c t√†i kho·∫£n
        if (authService.authenticate(username, password)) {
            // L·∫•y ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng
            User user = userService.getUserByUsername(username);
            if (user == null) {
                model.addAttribute("error", "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!");
                return "login";
            }
            // Ki·ªÉm tra tr·∫°ng th√°i active c·ªßa t√†i kho·∫£n
            if (!user.isActive()) {
                model.addAttribute("error", "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a!");
                return "login";
            }

            // L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p v√†o session
            session.setAttribute("loggedInUser", username);
            session.setAttribute("urlimg", UserService.getAvatarUrlByUsername(username));
            System.out.println("Ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p: " + username);

            // üî• Th√™m role v√†o session
            if (user != null) {
                session.setAttribute("role", user.getRole().toString()); // üî• L∆∞u role v√†o session
                System.out.println("ƒê√£ l∆∞u role v√†o session: " + user.getRole());
            }

            // N·∫øu l√† admin thi chuy·ªÉn trang
            if (authService.isAdmin(username)) {
                System.out.println("‚úÖ G·ªçi isAdmin() th√†nh c√¥ng.");
                return "redirect:/adminDashboard/dashboard";
            }
            if (rememberMe) {
                cookieService.setCookie(response, "rememberedUsername", URLEncoder.encode(username, "UTF-8"));
                cookieService.setCookie(response, "rememberedPassword", URLEncoder.encode(password, "UTF-8"));
                cookieService.setCookie(response, "noname", URLEncoder.encode(username, "UTF-8"));
            } else {
                // Xo√° cookie n·∫øu kh√¥ng ch·ªçn "Ghi nh·ªõ ƒëƒÉng nh·∫≠p"
                cookieService.setCookie(response, "noname", URLEncoder.encode(username, "UTF-8"));
                cookieService.removeCookie(response, "rememberedUsername");
                cookieService.removeCookie(response, "rememberedPassword");

            }

            return "redirect:/home";
        }
        model.addAttribute("error", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
        return "login";
    }


//    @RequestMapping("/logout")
//    public String logout(HttpSession session, HttpServletResponse response, HttpServletRequest request) {
//        System.out.println("ƒê√£ logout");
//        session.removeAttribute("loggedInUser");
//        session.removeAttribute("urlimg");
//        session.invalidate();
//        cookieService.removeCookie(response,"rememberedUsername");
//        cookieService.removeCookie(response,"rememberedPassword");
//        cookieService.removeCookie(response,"noname");
//        System.out.println("ƒê√£ logout");
//        return "redirect:/home";
//    }

    @GetMapping("/forgotPass")
    public String forgotPasswordPage() {
        return "forgotPass";
    }

    @PostMapping("/forgotPass")
    public String sendOtp(@RequestParam String email, Model model) {
        System.out.println("üì© ƒê√£ nh·∫≠n y√™u c·∫ßu g·ª≠i OTP cho email: " + email);
        String result = authService.sendPasswordResetOtp(email);
        model.addAttribute("message", result);
        model.addAttribute("email", email);
        return "verifyOTP";
    }

    @GetMapping("/resetPass")
    public String resetPassPage(@RequestParam(required = false) String email,
                                HttpSession session, Model model) {
        if (email != null) {
            // Tr∆∞·ªùng h·ª£p ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (qu√™n m·∫≠t kh·∫©u)
            model.addAttribute("email", email);
        } else {
            // Tr∆∞·ªùng h·ª£p ƒë·ªïi m·∫≠t kh·∫©u t·ª´ trang c√° nh√¢n
            String username = (String) session.getAttribute("loggedInUser");
            if (username == null) {
                return "redirect:/login"; // Ch∆∞a ƒëƒÉng nh·∫≠p th√¨ chuy·ªÉn v·ªÅ login
            }
            model.addAttribute("email", username); // D√πng username l√†m email
        }
        return "resetPass";
    }


    // X·ª≠ l√Ω ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
    @PostMapping("/resetPass")
    public String resetPassword(@RequestParam String email,
                                @RequestParam String newPassword,
                                @RequestParam String confirmPassword,
                                Model model) {
        // Ki·ªÉm tra x√°c nh·∫≠n m·∫≠t kh·∫©u
        if (!newPassword.equals(confirmPassword)) {
            model.addAttribute("error", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            return "resetPass";
        }

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
        boolean isUpdated = passService.updatePassword(email, newPassword);
        if (isUpdated) {
            model.addAttribute("success", "M·∫≠t kh·∫©u ƒë√£ c·∫≠p nh·∫≠t th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p l·∫°i.");
            return "login";  // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
        } else {
            model.addAttribute("error", "L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i!");
            return "resetPass";
        }
    }

    // Tra ve trang signup
    @GetMapping("/signup")
    public String signupPage() {
        return "signup";
    }

    // Xu li signup
    @PostMapping("/signup")
    public String signup(@RequestParam String email,
                         @RequestParam String username,
                         @RequestParam String password,
                         @RequestParam String confirmPassword,
                         @RequestParam String role,
                         Model model) {

        boolean hasError = false;
        // Ki·ªÉm tra n·∫øu b·∫•t k·ª≥ tr∆∞·ªùng n√†o b·ªã thi·∫øu
        if (email == null || username == null || password == null || confirmPassword == null) {
            model.addAttribute("error", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            hasError = true;
        }

        // Ki·ªÉm tra email h·ª£p l·ªá
        if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            model.addAttribute("emailError", "Email kh√¥ng h·ª£p l·ªá!");
            hasError = true;
        }


        // Ki·ªÉm tra m·∫≠t kh·∫©u x√°c nh·∫≠n
        if (!password.equals(confirmPassword)) {
            model.addAttribute("passwordError", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            hasError = true;
        }

        // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (authService.isEmailExists(email)) {
            model.addAttribute("emailError", "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
            hasError = true;
        }

        // Ki·ªÉm tra xem username ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (authService.isUsernameExists(username)) {
            model.addAttribute("usernameError", "T√™n ƒëƒÉng nh·∫≠p n√†y ƒë√£ t·ªìn t·∫°i!");
            hasError = true;
        }

        // N·∫øu c√≥ l·ªói, quay l·∫°i trang signup + gi·ªØ l·∫°i th√¥ng tin nh·∫≠p v√†o
        if (hasError) {
            model.addAttribute("emailValue", email);
            //model.addAttribute("phoneValue", phone);
            model.addAttribute("usernameValue", username);
            return "signup";
        }

        User.Role userRole;
        try {
            userRole = User.Role.valueOf(role.toUpperCase());
        } catch (IllegalArgumentException e) {
            userRole = User.Role.USER;
        }

        String result = authService.registerUser(email, username, password, userRole);
        model.addAttribute("email", email);
        model.addAttribute("actionType", "register");  // X√°c th·ª±c t√†i kho·∫£n
        model.addAttribute("message", result);
        return "verifyOTP"; // D√πng chung trang verifyOTP.html
    }


}
