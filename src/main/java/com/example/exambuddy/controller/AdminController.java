package com.example.exambuddy.controller;

import com.example.exambuddy.model.Exam;
import com.example.exambuddy.model.Payment;
import com.example.exambuddy.model.Post;
import com.example.exambuddy.model.User;
import com.example.exambuddy.service.ExamService;
import com.example.exambuddy.service.FirebaseAuthService;
import com.example.exambuddy.service.PostService;
import com.example.exambuddy.service.UserService;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

@Controller
@RequestMapping("/admin")
public class AdminController {
    @Autowired
    private FirebaseAuthService authService;

    @Autowired
    private UserService userService;

    @Autowired
    private ExamService examService;

    @Autowired
    private PostService postService;

    // ‚úÖ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ truy c·∫≠p trang n√†y
    @GetMapping("")
    public String adminDashboard(Model model, HttpSession session) throws ExecutionException, InterruptedException {
        String loggedInUser = (String) session.getAttribute("loggedInUser");
        System.out.println("üìå Session hi·ªán t·∫°i: " + loggedInUser);

        if (loggedInUser == null || !authService.isAdmin(loggedInUser)) {
            System.out.println("‚ùå Kh√¥ng c√≥ user trong session ho·∫∑c kh√¥ng ph·∫£i admin. Chuy·ªÉn v·ªÅ login.");
            return "redirect:/login";
        }

        // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
        List<User> users = userService.getAllUsers();
        model.addAttribute("users", users);

        // L·∫•y danh s√°ch ƒë·ªÅ thi
        List<Exam> exams = examService.getAllExams();
        model.addAttribute("exams", exams);

        // L·∫•y danh s√°ch b√†i ƒëƒÉng
        List<Post> posts = PostService.getPostsFromFirestore();
        model.addAttribute("posts", posts);

        // T√≠nh t·ªïng s·ªë l∆∞·ª£ng
        model.addAttribute("totalUser", users.size());
        model.addAttribute("totalExam", exams.size());
        model.addAttribute("totalPost", posts.size());

        // ‚úÖ L·∫•y th√¥ng tin admin ƒë·ªÉ hi·ªÉn th·ªã avatar & username
        User adminUser = userService.getUserByUsername(loggedInUser);
        if (adminUser != null) {
            model.addAttribute("adminUser", adminUser);
            System.out.println("‚úÖ Admin: " + adminUser.getUsername() + " - Avatar: " + adminUser.getAvatarUrl());
        } else {
            System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y th√¥ng tin admin.");
        }

        System.out.println("‚úÖ Admin v√†o dashboard th√†nh c√¥ng!");
        return "adminDashboard";
    }

    @PostMapping("/changeRole")
    public String changeUserRole(@RequestParam String username, @RequestParam User.Role newRole, HttpSession session) {
        String loggedInUser = (String) session.getAttribute("loggedInUser");
        if (loggedInUser == null || !authService.isAdmin(loggedInUser)) {
            return "redirect:/login";
        }

        userService.updateUserRole(username, newRole);
        return "redirect:/admin";
    }

    // Endpoint c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa User (toggle active)
    @PostMapping("/updateUserStatus")
    public String updateUserStatus(@RequestParam String username, HttpSession session) {
        String loggedInUser = (String) session.getAttribute("loggedInUser");
        if (loggedInUser == null || !authService.isAdmin(loggedInUser)) {
            return "redirect:/login";
        }
        User user = userService.getUserByUsername(username);
        if (user != null) {
            boolean newStatus = !user.isActive();
            user.setActive(newStatus);
            userService.updateUserStatus(username, newStatus);  // Ph∆∞∆°ng th·ª©c n√†y c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai trong UserService
        }
        return "redirect:/admin";
    }

    // Endpoint c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa Exam (toggle active)
    @PostMapping("/updateExamStatus")
    public String updateExamStatus(@RequestParam String examId, HttpSession session) {
        String loggedInUser = (String) session.getAttribute("loggedInUser");
        if (loggedInUser == null || !authService.isAdmin(loggedInUser)) {
            return "redirect:/login";
        }
        Exam exam = examService.getExam(examId);
        if (exam != null) {
            boolean newStatus = !exam.isActive();
            exam.setActive(newStatus);
            examService.updateExamStatus(examId, newStatus);  // Ph∆∞∆°ng th·ª©c c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai trong ExamService
        }
        return "redirect:/admin";
    }

    @PostMapping("/updatePostStatus")
    public String updatePostStatus(@RequestParam String postId, HttpSession session) {
        String loggedInUser = (String) session.getAttribute("loggedInUser");
        if (loggedInUser == null || !authService.isAdmin(loggedInUser)) {
            return "redirect:/login";
        }
        Post post = postService.getPostById(postId); // Gi·∫£ s·ª≠ c√≥ ph∆∞∆°ng th·ª©c n√†y trong PostService
        if (post != null) {
            boolean newStatus = !post.isActive();
            post.setActive(newStatus);
            postService.updatePostStatus(postId, newStatus); // Ph∆∞∆°ng th·ª©c c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai trong PostService
        }
        return "redirect:/admin";
    }


}
