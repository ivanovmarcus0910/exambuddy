package com.example.exambuddy.service;

import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutures;
import com.google.cloud.firestore.*;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.firebase.auth.hash.Bcrypt;
import com.google.firebase.cloud.FirestoreClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class PasswordService {
    private final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    private static final String COLLECTION_NAME = "users";
    private static final String OTP_COLLECTION = "password_reset_otps"; // quen pass


    public boolean updatePassword(String email, String newPassword) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            // T√¨m ng∆∞·ªùi d√πng theo email
            Query query = firestore.collection(COLLECTION_NAME).whereEqualTo("email", email);
            QuerySnapshot querySnapshot = query.get().get();

            if (!querySnapshot.isEmpty()) {
                DocumentSnapshot doc = querySnapshot.getDocuments().get(0);
                DocumentReference userRef = doc.getReference();

                // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
                userRef.update("password", passwordEncoder.encode(newPassword));
                System.out.println("‚úÖ M·∫≠t kh·∫©u c·ªßa " + email + " ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");

                // X√≥a OTP sau khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng
                firestore.collection(OTP_COLLECTION).document(email).delete();

                return true;
            } else {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c√≥ email: " + email);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u: " + e.getMessage());
        }
        return false;
    }

    public boolean updatePasswordForUser(String username, String currentPassword, String newPassword) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            // üîç T√¨m ng∆∞·ªùi d√πng theo username trong Firestore
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();

            if (!userSnapshot.exists()) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi username: " + username);
                return false;
            }

            // ‚úÖ X√°c th·ª±c m·∫≠t kh·∫©u hi·ªán t·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            String storedPassword = userSnapshot.getString("password");
            if (!passwordEncoder.matches(currentPassword, storedPassword)) {
                System.out.println("‚ùå M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng cho username: " + username);
                return false;
            }

            // ‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
            userSnapshot.getReference().update("password", passwordEncoder.encode(newPassword));
            System.out.println("‚úÖ M·∫≠t kh·∫©u c·ªßa " + username + " ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u: " + e.getMessage());
            return false;
        }
    }

    // M√£ h√≥a m·∫≠t kh·∫©u
    public String encodePassword(String rawPassword) {
        return passwordEncoder.encode(rawPassword);
    }

    // So s√°nh m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p v·ªõi m·∫≠t kh·∫©u trong DB
    public boolean matches(String rawPassword, String encodedPassword) {
        System.out.println("üîç So s√°nh m·∫≠t kh·∫©u:");
        System.out.println("   - M·∫≠t kh·∫©u nh·∫≠p v√†o: " + rawPassword);
        System.out.println("   - M·∫≠t kh·∫©u t·ª´ DB: " + encodedPassword);
        boolean result = passwordEncoder.matches(rawPassword, encodedPassword);
        System.out.println("   - K·∫øt qu·∫£: " + result);
        return result;
    }

    /**
     * L·∫•y m·∫≠t kh·∫©u m√£ h√≥a t·ª´ Firestore d·ª±a tr√™n username
     */
    public ApiFuture<String> getPasswordByUsername(String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        DocumentReference docRef = firestore.collection(COLLECTION_NAME).document(username);

        // L·∫•y ApiFuture<DocumentSnapshot> t·ª´ Firestore (kh√¥ng block)
        ApiFuture<DocumentSnapshot> futureSnapshot = docRef.get();

        // Chuy·ªÉn ƒë·ªïi sang ApiFuture<String> v·ªõi h√†m transform
        return ApiFutures.transform(
                futureSnapshot,
                (DocumentSnapshot userSnapshot) -> {
                    if (!userSnapshot.exists()) {
                        System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi username: " + username);
                        return null;
                    }
                    return userSnapshot.getString("password");
                },
                MoreExecutors.directExecutor()
        );
    }

    // Ph∆∞∆°ng th·ª©c ki·ªÉm tra m·∫≠t kh·∫©u v·ªõi ƒëi·ªÅu ki·ªán m·ªõi
    public boolean isValidPassword(String password) {
        if (password == null) {
            return false;
        }
        // Regex: √≠t nh·∫•t 8 k√Ω t·ª±, c√≥ ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        return password.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$");
    }
}
