package com.example.exambuddy.service;

import com.example.exambuddy.model.User;
import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.*;
import com.google.firebase.cloud.FirestoreClient;
import jakarta.mail.MessagingException;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

@Service
public class FirebaseAuthService {
    @Autowired
    private EmailService emailService;
    @Autowired
    private PasswordService passService;
    private static final String COLLECTION_NAME = "users";
    private static final String ACCOUNT_OTP_COLLECTION = "account_verify_otps"; // xac thuc account
    private static final String OTP_COLLECTION = "password_reset_otps"; // quen pass

    // Danh s√°ch email l√† admin
    private static final List<String> ADMIN_Email = Arrays.asList(
            "trungtqde180411@fpt.edu.vn",
            "hainlde180364@fpt.edu.vn"
    );

    // ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi v√† g·ª≠i email x√°c th·ª±c
    public String registerUser(String email, String username, String password, User.Role selectRole) {
        Firestore firestore = FirestoreClient.getFirestore();
        CollectionReference users = firestore.collection(COLLECTION_NAME);


        // Ki·ªÉm tra email trong danh s√°ch Admin
        User.Role role = ADMIN_Email.contains(email) ? User.Role.ADMIN : selectRole;

        // N·∫øu vai tr√≤ l√† Teacher, l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu v·ªõi vai tr√≤ Pending_Teacher
            if (role == User.Role.TEACHER) {
                role = User.Role.PENDING_TEACHER;  // Chuy·ªÉn th√†nh Pending_Teacher
            }

        System.out.println("M·∫≠t kh·∫©u tr∆∞·ªõc khi m√£ ho√°: " + password);
        // ‚úÖ M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o Firestore
        String hashedPassword = passService.encodePassword(password);
        System.out.println("M·∫≠t kh·∫©u sau khi m√£ ho√°: " + hashedPassword);
        User user = new User(username, email, username, hashedPassword, false, role); // Ch∆∞a x√°c th·ª±c t√†i kho·∫£n


        try {
            // ‚úÖ T·∫°o OTP x√°c th·ª±c t√†i kho·∫£n
            String otp = emailService.generateOtp();
            long expiryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(1); // H·∫øt h·∫°n sau 1 ph√∫t

            // L∆∞u OTP v√†o Firestore (kh·ªüi t·∫°o resendCount = 0, lockTime = 0)
            OtpRecord otpRecord = new OtpRecord(otp, expiryTime);
            FirestoreClient.getFirestore().collection(ACCOUNT_OTP_COLLECTION).document(email).set(otpRecord);

            // ‚úÖ G·ª≠i OTP qua email
            emailService.sendOtpEmailAccount(email, otp);
            System.out.println("üìß ƒê√£ g·ª≠i m√£ OTP x√°c th·ª±c t√†i kho·∫£n cho: " + email);
            System.out.println("Role c·ªßa ng∆∞·ªùi d√πng ƒëƒÉng k√Ω: " + role);
            System.out.println("D·ªØ li·ªáu User chu·∫©n b·ªã l∆∞u v√†o Firestore: " + user);

            // ‚úÖ L∆∞u th√¥ng tin t√†i kho·∫£n v√†o Firestore (ch∆∞a x√°c th·ª±c)
            users.document(username).set(user);

            System.out.println("‚úÖ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Firestore (ch∆∞a x√°c th·ª±c): " + username);
            return "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!";

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi g·ª≠i OTP x√°c th·ª±c: " + e.getMessage());
            e.printStackTrace();
            return "Error: Kh√¥ng th·ªÉ g·ª≠i OTP x√°c th·ª±c!";
        }
    }

    /**
     * G·ª≠i OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† l∆∞u v√†o Firestore
     */
    public String sendPasswordResetOtp(String email) {
        Firestore firestore = FirestoreClient.getFirestore();
        CollectionReference otpCollection = firestore.collection(OTP_COLLECTION);

        String otp = emailService.generateOtp();
        long expiryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(1); // H·∫øt h·∫°n sau 1 ph√∫t

        try {
            OtpRecord otpRecord = new OtpRecord(otp, expiryTime);
            otpCollection.document(email).set(otpRecord);
            emailService.sendOtpEmail(email, otp);
            return "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email.";
        } catch (Exception e) {
            return "L·ªói khi g·ª≠i OTP: " + e.getMessage();
        }
    }

    /**
     * G·ª≠i l·∫°i m√£ OTP kh√°c
     */
    /*public CompletableFuture<String> resendOtp(String email, String actionType) {
        Firestore firestore = FirestoreClient.getFirestore();
        String collectionName = actionType.equals("register") ? ACCOUNT_OTP_COLLECTION : OTP_COLLECTION;
        String newOtp = emailService.generateOtp();
        long expiryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(1);

        DocumentReference docRef = firestore.collection(collectionName).document(email);

        ApiFuture<DocumentSnapshot> snapshotApiFuture = docRef.get();

        return toCompletableFuture(snapshotApiFuture)
                .thenCompose(existingOtp -> {
                    CompletableFuture<WriteResult> updateFuture;
                    if (existingOtp.exists()) {
                        ApiFuture<WriteResult> updateApiFuture = docRef.update("otp", newOtp, "expiryTime", expiryTime);
                        updateFuture = toCompletableFuture(updateApiFuture);
                    } else {
                        ApiFuture<WriteResult> setApiFuture = docRef.set(new OtpRecord(newOtp, expiryTime));
                        updateFuture = toCompletableFuture(setApiFuture);
                    }
                    return updateFuture.thenApply(writeResult -> {
                        if (actionType.equals("register")) {
                            System.out.println("üìß G·ª≠i l·∫°i OTP x√°c th·ª±c t√†i kho·∫£n ƒë·∫øn: " + email);
                            try {
                                emailService.sendOtpEmailAccount(email, newOtp);
                            } catch (MessagingException e) {
                                throw new RuntimeException(e);
                            }
                        } else {
                            System.out.println("üìß G·ª≠i l·∫°i OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn: " + email);
                            try {
                                emailService.sendOtpEmail(email, newOtp);
                            } catch (MessagingException e) {
                                throw new RuntimeException(e);
                            }
                        }
                        return "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i!";
                    });
                })
                .exceptionally(ex -> "L·ªói khi g·ª≠i l·∫°i OTP: " + ex.getMessage());
    }*/
    public CompletableFuture<String> resendOtp(String email, String actionType) {
        Firestore firestore = FirestoreClient.getFirestore();
        String collectionName = actionType.equals("register") ? ACCOUNT_OTP_COLLECTION : OTP_COLLECTION;
        DocumentReference docRef = firestore.collection(collectionName).document(email);
        long now = System.currentTimeMillis();

        return CompletableFuture.supplyAsync(() -> {
            try {
                // S·ª≠ d·ª•ng transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nguy√™n t·ª≠
                String result = firestore.runTransaction(transaction -> {
                    DocumentSnapshot snapshot = transaction.get(docRef).get();
                    OtpRecord record;
                    if (snapshot.exists()) {
                        record = snapshot.toObject(OtpRecord.class);
                        if (record == null) {
                            record = new OtpRecord();
                        }
                    } else {
                        record = new OtpRecord();
                    }

                    // Ki·ªÉm tra resendCount v√† lockTime
                    if (record.getResendCount() >= 1) {
                        if (now - record.getLockTime() < TimeUnit.MINUTES.toMillis(2)) {
                            // N·∫øu ch∆∞a h·∫øt th·ªùi gian kh√≥a, tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
                            return "B·∫°n ƒë√£ g·ª≠i OTP qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau 1 ph√∫t.";
                        } else {
                            // Sau 1 ph√∫t, reset l·∫°i s·ªë l·∫ßn g·ª≠i v√† lockTime
                            record.setResendCount(0);
                            record.setLockTime(0);
                        }
                    }

                    // T·∫°o OTP m·ªõi v√† c·∫≠p nh·∫≠t th·ªùi gian h·∫øt h·∫°n
                    String newOtp = emailService.generateOtp();
                    long expiryTime = now + TimeUnit.MINUTES.toMillis(1);
                    record.setOtp(newOtp);
                    record.setExpiryTime(expiryTime);

                    // C·∫≠p nh·∫≠t s·ªë l·∫ßn g·ª≠i
                    int newCount = record.getResendCount() + 1;
                    record.setResendCount(newCount);
                    // N·∫øu s·ªë l·∫ßn g·ª≠i ƒë·∫°t gi·ªõi h·∫°n, ƒë·∫∑t lockTime
                    if (newCount >= 1) {
                        record.setLockTime(now);
                    }

                    // L∆∞u l·∫°i record ƒë√£ c·∫≠p nh·∫≠t trong transaction
                    transaction.set(docRef, record);

                    // G·ª≠i OTP qua email
                    if (actionType.equals("register")) {
                        System.out.println("üìß G·ª≠i l·∫°i OTP x√°c th·ª±c t√†i kho·∫£n ƒë·∫øn: " + email);
                        emailService.sendOtpEmailAccount(email, newOtp);
                    } else {
                        System.out.println("üìß G·ª≠i l·∫°i OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn: " + email);
                        emailService.sendOtpEmail(email, newOtp);
                    }
                    return "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i!";
                }).get();
                return result;
            } catch (Exception e) {
                return "L·ªói khi g·ª≠i l·∫°i OTP: " + e.getMessage();
            }
        });
    }

    /**
     * Chuy·ªÉn ƒë·ªïi ApiFuture<T> th√†nh CompletableFuture<T>
     */
    private <T> CompletableFuture<T> toCompletableFuture(ApiFuture<T> apiFuture) {
        CompletableFuture<T> completableFuture = new CompletableFuture<>();
        apiFuture.addListener(() -> {
            try {
                completableFuture.complete(apiFuture.get());
            } catch (Exception e) {
                completableFuture.completeExceptionally(e);
            }
        }, Executors.newSingleThreadExecutor());
        return completableFuture;
    }

    /**
     * X√°c th·ª±c OTP tr∆∞·ªõc khi cho ph√©p ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u khi qu√™n m·∫≠t kh·∫©u
     */
    public boolean verifyOtp(String email, String otp) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot otpSnapshot = firestore.collection(OTP_COLLECTION).document(email).get().get();
            if (!otpSnapshot.exists()) {
                return false;
            }

            OtpRecord otpRecord = otpSnapshot.toObject(OtpRecord.class);
            if (otpRecord == null || System.currentTimeMillis() > otpRecord.getExpiryTime()) {
                return false;
            }

            return otpRecord.getOtp().equals(otp);
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * X√°c th·ª±c t√†i kho·∫£n b·∫±ng OTP
     */
    public boolean verifyAccountOtp(String email, String otp) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot otpSnapshot = firestore.collection(ACCOUNT_OTP_COLLECTION).document(email).get().get();
            if (!otpSnapshot.exists()) return false;

            OtpRecord otpRecord = otpSnapshot.toObject(OtpRecord.class);
            if (otpRecord == null || System.currentTimeMillis() > otpRecord.getExpiryTime()) return false;
            System.out.println("ƒê√£ qua ƒë√¢y");
            if (otpRecord.getOtp().equals(otp)) {
                // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c t√†i kho·∫£n
                Query query = firestore.collection(COLLECTION_NAME).whereEqualTo("email", email);
                QuerySnapshot querySnapshot = query.get().get();

                if (!querySnapshot.isEmpty()) {
                    DocumentSnapshot doc = querySnapshot.getDocuments().get(0);
                    doc.getReference().update("verified", true);
                    System.out.println("‚úÖ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c: " + email);
                }

                // ‚úÖ X√≥a OTP sau khi x√°c th·ª±c th√†nh c√¥ng
                firestore.collection(ACCOUNT_OTP_COLLECTION).document(email).delete();
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    public static class OtpRecord {
        private String otp;
        private long expiryTime;
        private int resendCount;
        private long lockTime;

        public OtpRecord() {
            this.resendCount = 0;
            this.lockTime = 0;
        }

        public OtpRecord(String otp, long expiryTime) {
            this.otp = otp;
            this.expiryTime = expiryTime;
            this.resendCount = 0;
            this.lockTime = 0;
        }

        public String getOtp() {
            return otp;
        }

        public void setOtp(String otp) {
            this.otp = otp;
        }

        public long getExpiryTime() {
            return expiryTime;
        }

        public void setExpiryTime(long expiryTime) {
            this.expiryTime = expiryTime;
        }

        public int getResendCount() {
            return resendCount;
        }

        public void setResendCount(int resendCount) {
            this.resendCount = resendCount;
        }

        public long getLockTime() {
            return lockTime;
        }

        public void setLockTime(long lockTime) {
            this.lockTime = lockTime;
        }
    }

    //Ki·ªÉm tra xem email ƒë√£ x√°c th·ª±c ch∆∞a
    public boolean isEmailVerified(String email) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            // üîç Truy v·∫•n Firestore ƒë·ªÉ t√¨m user theo email
            Query query = firestore.collection(COLLECTION_NAME).whereEqualTo("email", email);
            QuerySnapshot querySnapshot = query.get().get();

            // Ki·ªÉm tra xem c√≥ user n√†o v·ªõi email n√†y kh√¥ng
            if (querySnapshot.isEmpty()) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y user n√†o v·ªõi email: " + email);
                return false;
            }

            // L·∫•y document ƒë·∫ßu ti√™n (n·∫øu c√≥ nhi·ªÅu k·∫øt qu·∫£, Firestore l·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n)
            DocumentSnapshot userSnapshot = querySnapshot.getDocuments().get(0);
            Boolean verified = userSnapshot.getBoolean("verified");

            // In ra ƒë·ªÉ debug
            System.out.println("üîç Gi√° tr·ªã verified t·ª´ Firestore cho " + email + ": " + verified);

            // X·ª≠ l√Ω n·∫øu tr∆∞·ªùng "verified" b·ªã null (ch∆∞a t·ªìn t·∫°i)
            if (verified == null) {
                System.out.println("‚ö†Ô∏è Tr∆∞·ªùng verified kh√¥ng t·ªìn t·∫°i ho·∫∑c b·ªã null!");
                return false;
            }

            return verified;  // Tr·∫£ v·ªÅ true n·∫øu ƒë√£ x√°c th·ª±c
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }


    // X√°c th·ª±c ƒëƒÉng nh·∫≠p b·∫±ng username & password
    public CompletableFuture<Boolean> authenticate(String username, String password) {
        CompletableFuture<Boolean> future = new CompletableFuture<>();
        Firestore firestore = FirestoreClient.getFirestore();

        // Gi·∫£ s·ª≠ passService.getPasswordByUsernameAsync tr·∫£ v·ªÅ ApiFuture<String>
        ApiFuture<String> hashedPasswordFuture = passService.getPasswordByUsername(username);

        hashedPasswordFuture.addListener(() -> {
            try {
                String hashedPasswordFromDB = hashedPasswordFuture.get();
                if (hashedPasswordFromDB == null) {
                    future.complete(false);
                } else {
                    boolean match = passService.matches(password, hashedPasswordFromDB);
                    future.complete(match);
                }
            } catch (Exception e) {
                e.printStackTrace();
                future.complete(false);
            }
        }, Executors.newSingleThreadExecutor());

        return future;
    }


    // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
    public CompletableFuture<Boolean> isEmailExists(String email) {
        Firestore firestore = FirestoreClient.getFirestore();
        Query query = firestore.collection(COLLECTION_NAME).whereEqualTo("email", email);
        ApiFuture<QuerySnapshot> queryFuture = query.get();

        return CompletableFuture.supplyAsync(() -> {
            try {
                QuerySnapshot snapshot = queryFuture.get();
                return !snapshot.isEmpty();
            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }
        });
    }

    // Ki·ªÉm tra xem username ƒë√£ t·ªìn t·∫°i ch∆∞a
    public boolean isUsernameExists(String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();
            return userSnapshot.exists();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // ‚úÖ Ki·ªÉm tra xem user c√≥ ph·∫£i Admin kh√¥ng
    public boolean isAdmin(String username) {
        System.out.println("üìå ƒêang ki·ªÉm tra quy·ªÅn admin c·ªßa: " + username);  // ‚úÖ Debug xem h√†m c√≥ ch·∫°y kh√¥ng
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();
            if (!userSnapshot.exists()) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y user: " + username);
                return false;
            }

            String role = userSnapshot.getString("role");
            System.out.println("‚úÖ Role c·ªßa " + username + " l√†: " + role);
            return role != null && role.equalsIgnoreCase("ADMIN");

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t s·ªë l·∫ßn ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
    public void updateFailedLogin(HttpSession session) {
        Integer failedAttempts = (Integer) session.getAttribute("failedLoginCount");
        if (failedAttempts == null) {
            failedAttempts = 1;
        } else {
            failedAttempts++;
        }
        session.setAttribute("failedLoginCount", failedAttempts);
        // N·∫øu ƒë√£ nh·∫≠p sai >= 5 l·∫ßn, ƒë·∫∑t th·ªùi gian lock hi·ªán t·∫°i
        if (failedAttempts >= 5) {
            session.setAttribute("loginLockTime", System.currentTimeMillis());
        }
    }

}
