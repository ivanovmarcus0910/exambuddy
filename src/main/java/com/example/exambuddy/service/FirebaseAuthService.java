package com.example.exambuddy.service;

import com.example.exambuddy.model.User;
import com.google.cloud.firestore.*;
import com.google.firebase.cloud.FirestoreClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

@Service
public class FirebaseAuthService {
    @Autowired
    private EmailService emailService;
    @Autowired
    private PasswordService passService;
    private static final String COLLECTION_NAME = "users";
    private static final String ACCOUNT_OTP_COLLECTION = "account_verify_otps"; // xac thuc account
    private static final String OTP_COLLECTION = "password_reset_otps"; // quen pass

    // Danh s√°ch email l√† admin
    private static final List<String> ADMIN_Email = Arrays.asList(
            "trungtqde180411@fpt.edu.vn",
            "hainlde180364@fpt.edu.vn"
    );

    // ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi v√† g·ª≠i email x√°c th·ª±c
    public String registerUser(String email, String username, String password, User.Role selectRole) {
        Firestore firestore = FirestoreClient.getFirestore();
        CollectionReference users = firestore.collection(COLLECTION_NAME);


        // Ki·ªÉm tra email trong danh s√°ch Admin
        User.Role role = ADMIN_Email.contains(email) ? User.Role.ADMIN : selectRole;

        System.out.println("M·∫≠t kh·∫©u tr∆∞·ªõc khi m√£ ho√°: " + password);
        // ‚úÖ M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o Firestore
        String hashedPassword = passService.encodePassword(password);
        System.out.println("M·∫≠t kh·∫©u sau khi m√£ ho√°: " + hashedPassword);
        User user = new User(username, email, username, hashedPassword, false, role); // Ch∆∞a x√°c th·ª±c t√†i kho·∫£n

        try {
            // ‚úÖ T·∫°o OTP x√°c th·ª±c t√†i kho·∫£n
            String otp = emailService.generateOtp();
            long expiryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(1); // H·∫øt h·∫°n sau 1 ph√∫t

            // ‚úÖ L∆∞u OTP v√†o Firestore
            firestore.collection(ACCOUNT_OTP_COLLECTION).document(email).set(new OtpRecord(otp, expiryTime));

            // ‚úÖ G·ª≠i OTP qua email
            emailService.sendOtpEmailAccount(email, otp);
            System.out.println("üìß ƒê√£ g·ª≠i m√£ OTP x√°c th·ª±c t√†i kho·∫£n cho: " + email);
            System.out.println("Role c·ªßa ng∆∞·ªùi d√πng ƒëƒÉng k√Ω: " + role);
            System.out.println("D·ªØ li·ªáu User chu·∫©n b·ªã l∆∞u v√†o Firestore: " + user);

            // ‚úÖ L∆∞u th√¥ng tin t√†i kho·∫£n v√†o Firestore (ch∆∞a x√°c th·ª±c)
            users.document(username).set(user);

            System.out.println("‚úÖ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Firestore (ch∆∞a x√°c th·ª±c): " + username);
            return "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!";

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi g·ª≠i OTP x√°c th·ª±c: " + e.getMessage());
            e.printStackTrace();
            return "Error: Kh√¥ng th·ªÉ g·ª≠i OTP x√°c th·ª±c!";
        }
    }

    /**
     * G·ª≠i OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† l∆∞u v√†o Firestore
     */
    public String sendPasswordResetOtp(String email) {
        Firestore firestore = FirestoreClient.getFirestore();
        CollectionReference otpCollection = firestore.collection(OTP_COLLECTION);

        String otp = emailService.generateOtp();
        long expiryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(1); // H·∫øt h·∫°n sau 1 ph√∫t

        try {
            otpCollection.document(email).set(new OtpRecord(otp, expiryTime));
            emailService.sendOtpEmail(email, otp);
            return "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email.";
        } catch (Exception e) {
            return "L·ªói khi g·ª≠i OTP: " + e.getMessage();
        }
    }

    /**
     * G·ª≠i l·∫°i m√£ OTP kh√°c
     */
    public String resendOtp(String email, String actionType) {
        Firestore firestore = FirestoreClient.getFirestore();
        String collectionName = actionType.equals("register") ? ACCOUNT_OTP_COLLECTION : OTP_COLLECTION;

        String newOtp = emailService.generateOtp();
        long expiryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(1);

        try {
            DocumentSnapshot existingOtp = firestore.collection(collectionName).document(email).get().get();

            if (existingOtp.exists()) {
                firestore.collection(collectionName).document(email).update("otp", newOtp, "expiryTime", expiryTime);
            } else {
                firestore.collection(collectionName).document(email).set(new OtpRecord(newOtp, expiryTime));
            }

            // ‚úÖ G·ª≠i ƒë√∫ng OTP theo lo·∫°i y√™u c·∫ßu
            if (actionType.equals("register")) {
                System.out.println("üìß G·ª≠i l·∫°i OTP x√°c th·ª±c t√†i kho·∫£n ƒë·∫øn: " + email);
                emailService.sendOtpEmailAccount(email, newOtp);
            } else {
                System.out.println("üìß G·ª≠i l·∫°i OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn: " + email);
                emailService.sendOtpEmail(email, newOtp);
            }

            return "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i!";
        } catch (Exception e) {
            return "L·ªói khi g·ª≠i l·∫°i OTP: " + e.getMessage();
        }
    }

    /**
     * X√°c th·ª±c OTP tr∆∞·ªõc khi cho ph√©p ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u khi qu√™n m·∫≠t kh·∫©u
     */
    public boolean verifyOtp(String email, String otp) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot otpSnapshot = firestore.collection(OTP_COLLECTION).document(email).get().get();
            if (!otpSnapshot.exists()) {
                return false;
            }

            OtpRecord otpRecord = otpSnapshot.toObject(OtpRecord.class);
            if (otpRecord == null || System.currentTimeMillis() > otpRecord.getExpiryTime()) {
                return false;
            }

            return otpRecord.getOtp().equals(otp);
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * X√°c th·ª±c t√†i kho·∫£n b·∫±ng OTP
     */
    public boolean verifyAccountOtp(String email, String otp) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot otpSnapshot = firestore.collection(ACCOUNT_OTP_COLLECTION).document(email).get().get();
            if (!otpSnapshot.exists()) return false;

            OtpRecord otpRecord = otpSnapshot.toObject(OtpRecord.class);
            if (otpRecord == null || System.currentTimeMillis() > otpRecord.getExpiryTime()) return false;
            System.out.println("ƒê√£ qua ƒë√¢y");
            if (otpRecord.getOtp().equals(otp)) {
                // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c t√†i kho·∫£n
                Query query = firestore.collection(COLLECTION_NAME).whereEqualTo("email", email);
                QuerySnapshot querySnapshot = query.get().get();

                if (!querySnapshot.isEmpty()) {
                    DocumentSnapshot doc = querySnapshot.getDocuments().get(0);
                    doc.getReference().update("verified", true);
                    System.out.println("‚úÖ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c: " + email);
                }

                // ‚úÖ X√≥a OTP sau khi x√°c th·ª±c th√†nh c√¥ng
                firestore.collection(ACCOUNT_OTP_COLLECTION).document(email).delete();
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    static class OtpRecord {
        private String otp;
        private long expiryTime;

        public OtpRecord() {
        }

        public OtpRecord(String otp, long expiryTime) {
            this.otp = otp;
            this.expiryTime = expiryTime;
        }

        public String getOtp() {
            return otp;
        }

        public long getExpiryTime() {
            return expiryTime;
        }
    }

    //Ki·ªÉm tra xem email ƒë√£ x√°c th·ª±c ch∆∞a
    public boolean isEmailVerified(String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();
            return userSnapshot.exists() && userSnapshot.getBoolean("verified");
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // X√°c th·ª±c ƒëƒÉng nh·∫≠p b·∫±ng username & password
    public boolean authenticate(String username, String password) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            // ‚úÖ L·∫•y m·∫≠t kh·∫©u m√£ h√≥a t·ª´ Firestore
            String hashedPasswordFromDB = passService.getPasswordByUsername(username);
            if (hashedPasswordFromDB == null) {
                return false; // Kh√¥ng t√¨m th·∫•y user
            }


            boolean match = passService.matches(password, hashedPasswordFromDB);
            return match;

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
    public boolean isEmailExists(String email) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            Query query = firestore.collection(COLLECTION_NAME).whereEqualTo("email", email);
            QuerySnapshot querySnapshot = query.get().get();
            return !querySnapshot.isEmpty();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // Ki·ªÉm tra xem username ƒë√£ t·ªìn t·∫°i ch∆∞a
    public boolean isUsernameExists(String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();
            return userSnapshot.exists();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // ‚úÖ Ki·ªÉm tra xem user c√≥ ph·∫£i Admin kh√¥ng
    public boolean isAdmin(String username) {
        System.out.println("üìå ƒêang ki·ªÉm tra quy·ªÅn admin c·ªßa: " + username);  // ‚úÖ Debug xem h√†m c√≥ ch·∫°y kh√¥ng
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();
            if (!userSnapshot.exists()) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y user: " + username);
                return false;
            }

            String role = userSnapshot.getString("role");
            System.out.println("‚úÖ Role c·ªßa " + username + " l√†: " + role);
            return role != null && role.equalsIgnoreCase("ADMIN");

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }


}
