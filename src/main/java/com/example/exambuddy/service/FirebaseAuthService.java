package com.example.exambuddy.service;

import com.example.exambuddy.model.User;
import com.google.cloud.firestore.*;
import com.google.firebase.cloud.FirestoreClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

@Service
public class FirebaseAuthService {
    @Autowired
    private  EmailService emailService;
    private static final String COLLECTION_NAME = "users";
    private static final String OTP_COLLECTION = "password_reset_otps";

    // ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi v√† g·ª≠i email x√°c th·ª±c
    public String registerUser(String email, String phone, String username, String password) {
        Firestore firestore = FirestoreClient.getFirestore();
        CollectionReference users = firestore.collection(COLLECTION_NAME);

        String verificationToken = UUID.randomUUID().toString();
        User user = new User(null, email, phone, username, password, verificationToken);

        try {
            // ‚úÖ G·ª≠i email x√°c th·ª±c tr∆∞·ªõc khi l∆∞u t√†i kho·∫£n
            System.out.println("üìß G·ª≠i email x√°c th·ª±c ƒë·∫øn: " + email);
            emailService.sendVerificationEmail(email, verificationToken);

            // ‚úÖ Ch·ªâ l∆∞u t√†i kho·∫£n n·∫øu email g·ª≠i th√†nh c√¥ng
            users.document(username).set(user);
            System.out.println("‚úÖ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Firestore: " + username);
            return verificationToken;

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi g·ª≠i email x√°c th·ª±c: " + e.getMessage());
            e.printStackTrace();
            return "Error: Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c!";
        }
    }

    //X√°c th·ª±c email b·∫±ng token
    public boolean verifyEmail(String token) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            Query query = firestore.collection(COLLECTION_NAME).whereEqualTo("verificationToken", token);
            QuerySnapshot querySnapshot = query.get().get();

            if (!querySnapshot.isEmpty()) {
                DocumentSnapshot doc = querySnapshot.getDocuments().get(0);
                DocumentReference userRef = doc.getReference();

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
                userRef.update("verified", true, "verificationToken", null);
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * G·ª≠i OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† l∆∞u v√†o Firestore
     */
    public String sendPasswordResetOtp(String email) {
        Firestore firestore = FirestoreClient.getFirestore();
        CollectionReference otpCollection = firestore.collection(OTP_COLLECTION);

        String otp = emailService.generateOtp();
        long expiryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(5); // H·∫øt h·∫°n sau 5 ph√∫t

        try {
            otpCollection.document(email).set(new OtpRecord(otp, expiryTime));
            emailService.sendOtpEmail(email, otp);
            return "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email.";
        } catch (Exception e) {
            return "L·ªói khi g·ª≠i OTP: " + e.getMessage();
        }
    }

    /**
    G·ª≠i l·∫°i m√£ OTP kh√°c
     */
    public String resendOtp(String email) {
        Firestore firestore = FirestoreClient.getFirestore();
        CollectionReference otpCollection = firestore.collection("password_reset_otps");

        String newOtp = emailService.generateOtp();
        long expiryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(5);

        try {
            DocumentSnapshot existingOtp = otpCollection.document(email).get().get();

            if (existingOtp.exists()) {
                otpCollection.document(email).update("otp", newOtp, "expiryTime", expiryTime);
            } else {
                otpCollection.document(email).set(new OtpRecord(newOtp, expiryTime));
            }

            emailService.sendOtpEmail(email, newOtp);
            return "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i!";
        } catch (Exception e) {
            return "L·ªói khi g·ª≠i l·∫°i OTP: " + e.getMessage();
        }
    }

    /**
     * X√°c th·ª±c OTP tr∆∞·ªõc khi cho ph√©p ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
     */
    public boolean verifyOtp(String email, String otp) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot otpSnapshot = firestore.collection(OTP_COLLECTION).document(email).get().get();
            if (!otpSnapshot.exists()) {
                return false;
            }

            OtpRecord otpRecord = otpSnapshot.toObject(OtpRecord.class);
            if (otpRecord == null || System.currentTimeMillis() > otpRecord.getExpiryTime()) {
                return false;
            }

            return otpRecord.getOtp().equals(otp);
        } catch (Exception e) {
            return false;
        }
    }

    static class OtpRecord {
        private String otp;
        private long expiryTime;

        public OtpRecord() {}

        public OtpRecord(String otp, long expiryTime) {
            this.otp = otp;
            this.expiryTime = expiryTime;
        }

        public String getOtp() {
            return otp;
        }

        public long getExpiryTime() {
            return expiryTime;
        }
    }

    //Ki·ªÉm tra xem email ƒë√£ x√°c th·ª±c ch∆∞a
    public boolean isEmailVerified(String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();
            return userSnapshot.exists() && userSnapshot.getBoolean("verified");
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }


    public boolean updatePassword(String email, String newPassword) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            // T√¨m ng∆∞·ªùi d√πng theo email
            Query query = firestore.collection(COLLECTION_NAME).whereEqualTo("email", email);
            QuerySnapshot querySnapshot = query.get().get();

            if (!querySnapshot.isEmpty()) {
                DocumentSnapshot doc = querySnapshot.getDocuments().get(0);
                DocumentReference userRef = doc.getReference();

                // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
                userRef.update("password", newPassword);
                System.out.println("‚úÖ M·∫≠t kh·∫©u c·ªßa " + email + " ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");

                // X√≥a OTP sau khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng
                firestore.collection(OTP_COLLECTION).document(email).delete();

                return true;
            } else {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c√≥ email: " + email);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u: " + e.getMessage());
        }
        return false;
    }


    // X√°c th·ª±c ƒëƒÉng nh·∫≠p b·∫±ng username & password
    public boolean authenticate(String username, String password) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();
            if (!userSnapshot.exists()) {
                return false;
            }
            User user = userSnapshot.toObject(User.class);
            return user != null && user.getPassword().equals(password);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
    public boolean isEmailExists(String email) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            Query query = firestore.collection(COLLECTION_NAME).whereEqualTo("email", email);
            QuerySnapshot querySnapshot = query.get().get();
            return !querySnapshot.isEmpty();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    // Ki·ªÉm tra xem username ƒë√£ t·ªìn t·∫°i ch∆∞a
    public boolean isUsernameExists(String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();
            return userSnapshot.exists();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}
