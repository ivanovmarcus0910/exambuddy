package com.example.exambuddy.service;

import com.example.exambuddy.model.Payment;
import com.example.exambuddy.model.User;
import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.*;
import com.google.firebase.cloud.FirestoreClient;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

@Service
public class UserService {
    private static final String COLLECTION_NAME = "users";

    public static User getUserData(String username) {
        Firestore firestore = FirestoreClient.getFirestore();

        try {
            DocumentSnapshot documentSnapshot = firestore.collection(COLLECTION_NAME)
                    .document(username)
                    .get()
                    .get();

            if (!documentSnapshot.exists()) {
                System.out.println("User not found in Firestore: " + username);
                return null;
            }

            User user = documentSnapshot.toObject(User.class);
            if (user == null) {
                System.out.println("Failed to map Firestore document to User object.");
                return null;
            }

            user.setUsername(username); // ƒê·∫£m b·∫£o username kh√¥ng b·ªã null
            return user;

        } catch (Exception e) {
            System.out.println("Error fetching user data for: " + username);
            e.printStackTrace();
            return null;
        }
    }

    public static Boolean changeAvatar(String username, String url) {

        Firestore firestore = FirestoreClient.getFirestore();
        try {
            // üîç T√¨m ng∆∞·ªùi d√πng theo username trong Firestore
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();
            if (!userSnapshot.exists()) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi username: " + username);
                return false;
            }
            userSnapshot.getReference().update("avatarUrl", url);
        } catch (Exception e) {
            System.out.println("L·ªói khi ƒë·ªïi avatar");
            return false;
        }
        return true;
    }

    // ‚úÖ Th√™m m·ªõi h√†m l∆∞u t√†i kho·∫£n OAuth2 v√†o Firestore
    public static void saveOAuth2User(String email, String name, String avatarUrl) {
        Firestore firestore = FirestoreClient.getFirestore();
        CollectionReference users = firestore.collection(COLLECTION_NAME);

        try {
            // Ki·ªÉm tra xem email n√†y ƒë√£ c√≥ trong DB ch∆∞a
            User existingUser = getUserData(email);
            if (existingUser != null && existingUser.getEmail() != null) {
                System.out.println("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i: " + email);
                return; // N·∫øu ƒë√£ t·ªìn t·∫°i th√¨ b·ªè qua
            }


            User user = new User();
            user.setEmail(email);
            user.setUsername(name);
            user.setAvatarUrl(avatarUrl);
            user.setPhone(""); // ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng c√≥ sƒët
            user.setPassword(""); // OAuth2 kh√¥ng c√≥ password
            user.setVerified(true); // ƒêƒÉng nh·∫≠p Google th√¨ coi nh∆∞ ƒë√£ x√°c th·ª±c lu√¥n

            users.document(email).set(user);
            System.out.println("‚úÖ ƒê√£ l∆∞u t√†i kho·∫£n Google v√†o Firestore: " + email);

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi l∆∞u t√†i kho·∫£n Google v√†o Firestore: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static String getAvatarUrlByUsername(String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            // L·∫•y d·ªØ li·ªáu c·ªßa user t·ª´ Firestore
            DocumentSnapshot userSnapshot = firestore.collection(COLLECTION_NAME).document(username).get().get();


            if (userSnapshot.exists()) {
                return userSnapshot.getString("avatarUrl"); // L·∫•y avatarUrl
            }
        } catch (Exception e) {
            System.out.println("L·ªói khi l·∫•y avatar c·ªßa: " + username);
        }
        return "http://res.cloudinary.com/dsuav027e/image/upload/v1739939318/dkm6iw7ujnsja8z9d3ek.png"; // Tr·∫£ v·ªÅ avatar m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
    }

    public static void updateUserField(String username, String field, Object value) {
        Firestore firestore = FirestoreClient.getFirestore();
        DocumentReference userRef = firestore.collection(COLLECTION_NAME).document(username);

        Map<String, Object> updates = new HashMap<>();
        updates.put(field, value);

        try {
            userRef.update(updates).get();  // C·∫≠p nh·∫≠t gi√° tr·ªã v√†o Firestore
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }
    }


    public List<User> getAllUsers() throws ExecutionException, InterruptedException {
        Firestore firestore = FirestoreClient.getFirestore();
        List<User> userList = new ArrayList<>();
        ApiFuture<QuerySnapshot> future = firestore.collection(COLLECTION_NAME).get();

        for (DocumentSnapshot document : future.get().getDocuments()) {
            User user = document.toObject(User.class);
            if (user != null) {
                user.setUsername(document.getId()); // L·∫•y ID t·ª´ Firestore
                userList.add(user);
            }
        }
        return userList;
    }

    public void updateUserRole(String username, User.Role role) {
        Firestore firestore = FirestoreClient.getFirestore();
        firestore.collection(COLLECTION_NAME).document(username).update("role", role.name());
    }

    public void deleteUser(String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        firestore.collection(COLLECTION_NAME).document(username).delete();
    }

    public User getUserByUsername(String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        try {
            DocumentSnapshot userSnapshot = firestore.collection("users").document(username).get().get();
            return userSnapshot.exists() ? userSnapshot.toObject(User.class) : null;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public boolean addPaymentTransaction(long paymentCode, int amoutn, String link, String status, String username) {
        Firestore firestore = FirestoreClient.getFirestore();
        CollectionReference transaction = firestore.collection("Transactions");
        Long time = System.currentTimeMillis();
        Payment payment = new Payment(paymentCode, amoutn, link, status, username, time);
        transaction.document().set(payment);
        return false;
    }

}
